datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                  Int            @id @default(autoincrement())
  name                String
  email               String         @unique
  password            String?
  googleId            String?        @unique // Optional, unique ID for Google-authenticated users
  role                Role           @default(USER)
  organization        Organization?  @relation("UserOrganization", fields: [organizationId], references: [id])
  organizationId      Int?
  managedBy           User?          @relation("UserManager", fields: [managedById], references: [id])
  managedById         Int?
  managedUsers        User[]         @relation("UserManager")
  projects            Project[]      @relation("ProjectUsers")
  managedProjects     Project[]      @relation("ProjectManager") // User as project manager
  Organization        Organization[]
  managedOrganization Organization?  @relation("OrganizationManager")
  forms               Form[] // Forms created by the user

  @@index([googleId])
}

model Form {
  id          Int              @id @default(autoincrement())
  formId      String           @unique // Unique identifier for each form
  name        String
  description String?
  userId      Int // ID of the user who created the form
  user        User             @relation(fields: [userId], references: [id])
  project     Project          @relation(fields: [projectId], references: [id])
  projectId   Int
  submissions FormSubmission[] // Submissions for this form
}

model FormSubmission {
  id        Int      @id @default(autoincrement())
  formId    Int // References the form
  form      Form     @relation(fields: [formId], references: [id])
  data      Json // The submitted form data
  createdAt DateTime @default(now())
}

model Organization {
  id               Int       @id @default(autoincrement())
  name             String    @unique
  manager          User?     @relation("OrganizationManager", fields: [primaryManagerId], references: [id])
  primaryManagerId Int?      @unique
  users            User[]    @relation("UserOrganization")
  projects         Project[]
  User             User?     @relation(fields: [userId], references: [id])
  userId           Int?
}

model Project {
  id             Int          @id @default(autoincrement())
  name           String
  description    String?
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
  manager        User?        @relation("ProjectManager", fields: [managerId], references: [id]) // Project manager
  managerId      Int?
  users          User[]       @relation("ProjectUsers") // Project team members
  forms          Form[] // Forms associated with this project
}

enum Role {
  ADMIN
  MANAGER
  USER
}
